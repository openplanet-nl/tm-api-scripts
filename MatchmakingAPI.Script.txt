/**
 *	API for Matchmaking
 */
#Const Version		"2021-04-01"
#Const ScriptName	"Libs/Nadeo/TMNext/TrackMania/API/MatchmakingAPI.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/MenuLibs/Common/Manialink/ManiaView2.Script.txt" as MV
#Include "Libs/Nadeo/TMNext/TrackMania/Config.Script.txt" as Config
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/HttpStruct.Script.txt" as HttpStruct
#Include "Libs/Nadeo/CommonLibs/Common/Http.Script.txt" as Http
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/MatchmakingStruct.Script.txt" as MatchmakingStruct
#Include "Libs/Nadeo/CommonLibs/Common/HttpClubAuthorizationHeader.Script.txt" as HttpClubAuthorizationHeader
#Include "Libs/Nadeo/CommonLibs/Common/HttpServerAuthorizationHeader.Script.txt" as HttpServerAuthorizationHeader

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Name "component-matchmaking-api" //< Component name
#Const P "ComponentMatchmakingAPI_" //< Prefix use to differentiate functions/variables in the script

#Const C_Headers [
	"Accept" => "application/json",
	"Content-Type" => "application/json"
]

/* Matchmaking API */
#Const C_API_Matchmaking "/api/matchmaking"
#Const C_API_Official "/api/official"
#Const C_API_Match "/api/match"
#Const C_Route_PostMatchmakingHeartbeat "/:MatchmakingId/heartbeat"
#Const C_Route_GetMatchmakingPlayerStatus "/:MatchmakingId/player-status"
#Const C_Route_PostMatchmakingAccept "/:MatchmakingId/accept"
#Const C_Route_PostMatchmakingCancel "/:MatchmakingId/cancel"
#Const C_Route_GetLeaderboard "/:MatchmakingId/leaderboard/me"
#Const C_Route_GetParticipantsScores "/:MatchId/participants"
#Const C_Route_GetMatchmakingDivisionRules "/:MatchmakingId/division/display-rules"
#Const C_Route_GetOfficialQueue "/:QueueName"

#Const C_RouteParameter_MatchmakingId "MatchmakingId"
#Const C_RouteParameter_MatchId "MatchId"
#Const C_RouteParameter_QueueName "QueueName"

/* Club API */
#Const C_API_Matches "/api/matches"
#Const C_Route_GetMatchByLid "/:Match"

#Const C_RouteParameter_MatchLid "Match"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Structures
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/* Matchmaking API */
#Struct ComponentMatchmakingAPI_K_HttpHeartbeat {
	Text status;
	Integer creation_date;
	Integer matchmaking_waiting_time;
	Text match_live_id;
	Integer ban_end_date;
}
#Struct ComponentMatchmakingAPI_K_HttpPenalty {
	Integer creation_date;
	Integer points;
}
#Struct ComponentMatchmakingAPI_K_HttpPlayerStatus {
	ComponentMatchmakingAPI_K_HttpHeartbeat current_heartbeat;
	ComponentMatchmakingAPI_K_HttpPenalty penalty;
	Text current_division;
	Integer current_progression;
}
#Struct ComponentMatchmakingAPI_K_HttpMatch {
	Text join_link;
}
#Struct ComponentMatchmakingAPI_K_HttpPlayerRanking {
	Integer matchmaking_id;
	Text player;
	Integer score;
}
#Struct ComponentMatchmakingAPI_K_HttpParticipant {
	Text player;
	Integer leaderboard_score_delta; //@TODO remove in the future when CLUB API remove it
	Integer skill_level; //@TODO remove in the future when CLUB API remove it
	Text current_division;
	Integer current_progression;
}
#Struct ComponentMatchmakingAPI_K_HttpMatchParticipants {
	Boolean is_completed;
	ComponentMatchmakingAPI_K_HttpParticipant[] participants;
}
#Struct ComponentMatchmakingAPI_K_HttpOfficialQueue {
	Integer id;
	Text name;
}
#Struct ComponentMatchmakingAPI_K_HttpDivisionRules {
	Text id;
	Integer position;
	Text display_rule_type;
	Integer display_rule_minimum_points;
	Integer display_rule_maximum_points;
	Integer display_rule_minimum_rank;
}
#Struct ComponentMatchmakingAPI_K_HttpDisplayDivisionRules {
	ComponentMatchmakingAPI_K_HttpDivisionRules[] divisions;
}
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Text[Text] GetHeadersWithClubAuth() {
	declare Text[Text] Headers = C_Headers;
	declare Text AuthorizationHeaders = HttpClubAuthorizationHeader::Get();
	declare Text KeyAutho = TL::SubString(AuthorizationHeaders, 0, TL::Length("Authorization"));
	declare Text ValueAutho = TL::SubString(AuthorizationHeaders, TL::Length("Authorization: "), TL::Length(AuthorizationHeaders));
	Headers[KeyAutho] = ValueAutho;
	return Headers;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Get the players scores (skill level and score delta) for a given match
Http::LibCommonHttp_K_Request Server_GetMatchParticipants(Text _MatchId) {
	declare Text Route = Http::InjectRouteParameters(C_Route_GetParticipantsScores, [C_RouteParameter_MatchId => _MatchId]);

	return Http::CreateGet(Config::Get().APIMatchmakingUrl^C_API_Match^Route, HttpServerAuthorizationHeader::GetHeadersWithClubAuthorization(C_Headers));
}

MatchmakingStruct::LibStructuresMatchmaking_K_MatchParticipants GetResponseFromGetMatchParticipants(Http::LibCommonHttp_K_Request _Request) {
	declare ComponentMatchmakingAPI_K_HttpMatchParticipants MatchParticipantsResponse;
	MatchParticipantsResponse.fromjson(Http::GetResult(_Request));

	declare MatchmakingStruct::LibStructuresMatchmaking_K_Participant[Text] Participants;
	foreach (Participant in MatchParticipantsResponse.participants) {
		Participants[Participant.player] = MatchmakingStruct::LibStructuresMatchmaking_K_Participant {
			AccountId = Participant.player,
			ScoreDelta = Participant.leaderboard_score_delta,
			SkillLevel = Participant.skill_level,
			CurrentDivision = Participant.current_division,
			CurrentProgression = Participant.current_progression
		};
	}
	
	declare MatchParticipants = MatchmakingStruct::LibStructuresMatchmaking_K_MatchParticipants {
		IsCompleted = MatchParticipantsResponse.is_completed,
		Participants = Participants
	};

	return MatchParticipants;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the matchmaking division rules
	*
	* @param _MatchmakingId				The id of matchmaking queue
	*
	* @return 										The request
*/
Http::LibCommonHttp_K_Request Server_GetMatchmakingDivisionRules(Text _MatchmakingId) {
	declare Text Route = Http::InjectRouteParameters(
		C_Route_GetMatchmakingDivisionRules,
		[C_RouteParameter_MatchmakingId => _MatchmakingId]
	);
	return Http::CreateGet(Config::Get().APIMatchmakingUrl^C_API_Matchmaking^Route, HttpServerAuthorizationHeader::GetHeadersWithClubAuthorization(C_Headers));
}

MatchmakingStruct::LibStructuresMatchmaking_K_Division[Text] GetResponseFromGetMatchmakingDivisionRules(Http::LibCommonHttp_K_Request _Request) {
	declare ComponentMatchmakingAPI_K_HttpDisplayDivisionRules DisplayDivisionRulesResponse;
	DisplayDivisionRulesResponse.fromjson(Http::GetResult(_Request));

	declare MatchmakingStruct::LibStructuresMatchmaking_K_Division[Text] Divisions;

	foreach (division in DisplayDivisionRulesResponse.divisions) {
		Divisions[division.id] = MatchmakingStruct::LibStructuresMatchmaking_K_Division {
			Id = division.id,
			Position = division.position,
			RuleType = division.display_rule_type,
			MinimumPoints = division.display_rule_minimum_points,
			MaximumPoints = division.display_rule_maximum_points,
			MinimumRank = division.display_rule_minimum_rank
		};
	}

	return Divisions;
}
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the component
 *
 *	@return														The component id
 */
Text Component() {
	return MV::Component(
C_Name,
"""
""",
"""
#Include "TextLib" as {{{P}}}TL
/* Matchmaking API */
#Const {{{P}}}C_Headers {{{dump(C_Headers)}}}
#Const {{{P}}}C_API_Matchmaking {{{dump(C_API_Matchmaking)}}}
#Const {{{P}}}C_API_Official {{{dump(C_API_Official)}}}
#Const {{{P}}}C_Route_PostMatchmakingHeartbeat {{{dump(C_Route_PostMatchmakingHeartbeat)}}}
#Const {{{P}}}C_Route_GetMatchmakingPlayerStatus {{{dump(C_Route_GetMatchmakingPlayerStatus)}}}
#Const {{{P}}}C_Route_PostMatchmakingAccept {{{dump(C_Route_PostMatchmakingAccept)}}}
#Const {{{P}}}C_Route_PostMatchmakingCancel {{{dump(C_Route_PostMatchmakingCancel)}}}
#Const {{{P}}}C_Route_GetLeaderboard {{{dump(C_Route_GetLeaderboard)}}}
#Const {{{P}}}C_Route_GetOfficialQueue {{{dump(C_Route_GetOfficialQueue)}}}
#Const {{{P}}}C_RouteParameter_MatchmakingId {{{dump(C_RouteParameter_MatchmakingId)}}}
#Const {{{P}}}C_Route_GetMatchmakingDivisionRules {{{dump(C_Route_GetMatchmakingDivisionRules)}}}
#Const {{{P}}}C_RouteParameter_QueueName {{{dump(C_RouteParameter_QueueName)}}}

/* Club API */
#Const {{{P}}}C_API_Matches {{{dump(C_API_Matches)}}}
#Const {{{P}}}C_Route_GetMatchByLid {{{dump(C_Route_GetMatchByLid)}}}
#Const {{{P}}}C_RouteParameter_MatchLid {{{dump(C_RouteParameter_MatchLid)}}}

{{{dumptype(ComponentMatchmakingAPI_K_HttpHeartbeat)}}}
{{{dumptype(ComponentMatchmakingAPI_K_HttpPenalty)}}}
{{{dumptype(ComponentMatchmakingAPI_K_HttpPlayerStatus)}}}
{{{dumptype(ComponentMatchmakingAPI_K_HttpMatch)}}}
{{{dumptype(ComponentMatchmakingAPI_K_HttpPlayerRanking)}}}
{{{dumptype(ComponentMatchmakingAPI_K_HttpOfficialQueue)}}}
{{{dumptype(ComponentMatchmakingAPI_K_HttpDivisionRules)}}}
{{{dumptype(ComponentMatchmakingAPI_K_HttpDisplayDivisionRules)}}}
""",
"""
Text[Text] {{{P}}}GetHeadersWithClubAuth() {
	declare Text[Text] Headers = {{{P}}}C_Headers;
	declare Text AuthorizationHeaders = {{{HttpClubAuthorizationHeader::P}}}Get();
	declare Text KeyAutho = {{{P}}}TL::SubString(AuthorizationHeaders, 0, 13);
	declare Text ValueAutho = {{{P}}}TL::SubString(AuthorizationHeaders, 15, {{{P}}}TL::Length(AuthorizationHeaders));
	Headers[KeyAutho] = ValueAutho;
	return Headers;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to post a Matchmaking Heartbeat
	*
	* @param _MatchmakingId				The id of matchmaking queue
	*
	* @return 													The request
*/
{{{Http::P}}}K_Request {{{P}}}PostMatchmakingHeartbeat(Integer _MatchmakingId) {
	declare Text Route = {{{Http::P}}}InjectRouteParameters(
		{{{P}}}C_Route_PostMatchmakingHeartbeat,
		[{{{P}}}C_RouteParameter_MatchmakingId => ""^_MatchmakingId]
	);
	return {{{Http::P}}}CreatePost({{{Config::P}}}Get().APIMatchmakingUrl^{{{P}}}C_API_Matchmaking^Route, "", {{{P}}}GetHeadersWithClubAuth());
}

{{{MatchmakingStruct::P}}}K_Heartbeat HeartbeatApiToScript(ComponentMatchmakingAPI_K_HttpHeartbeat _HeartbeatResponse) {
	return {{{MatchmakingStruct::P}}}K_Heartbeat {
		Status = _HeartbeatResponse.status,
		CreationDate = _HeartbeatResponse.creation_date,
		MatchmakingWaitingTime = _HeartbeatResponse.matchmaking_waiting_time,
		MatchLiveId = _HeartbeatResponse.match_live_id,
		BanEndDate = _HeartbeatResponse.ban_end_date
	};
}

{{{MatchmakingStruct::P}}}K_Heartbeat {{{P}}}GetResponseFromPostMatchmakingHeartbeat({{{Http::P}}}K_Request _Request) {
	declare ComponentMatchmakingAPI_K_HttpHeartbeat HeartbeatResponse;
	HeartbeatResponse.fromjson({{{Http::P}}}GetResult(_Request));

	return HeartbeatApiToScript(HeartbeatResponse);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the player status
	*
	* @param _MatchmakingId				The id of matchmaking queue
	*
	* @return 													The request
*/
{{{Http::P}}}K_Request {{{P}}}GetMatchmakingPlayerStatus(Integer _MatchmakingId) {
	declare Text Route = {{{Http::P}}}InjectRouteParameters(
		{{{P}}}C_Route_GetMatchmakingPlayerStatus,
		[{{{P}}}C_RouteParameter_MatchmakingId => ""^_MatchmakingId]
	);
	return {{{Http::P}}}CreateGet({{{Config::P}}}Get().APIMatchmakingUrl^{{{P}}}C_API_Matchmaking^Route, {{{P}}}GetHeadersWithClubAuth());
}

{{{MatchmakingStruct::P}}}K_PlayerStatus {{{P}}}GetResponseFromGetMatchmakingPlayerStatus({{{Http::P}}}K_Request _Request) {
	declare ComponentMatchmakingAPI_K_HttpPlayerStatus PlayerStatusResponse;
	PlayerStatusResponse.fromjson({{{Http::P}}}GetResult(_Request));

	return {{{MatchmakingStruct::P}}}K_PlayerStatus {
		CurrentHeartbeat = HeartbeatApiToScript(PlayerStatusResponse.current_heartbeat),
		Penalty = {{{MatchmakingStruct::P}}}K_Penalty {
			CreationDate = PlayerStatusResponse.penalty.creation_date,
			Points = PlayerStatusResponse.penalty.points
		},
		CurrentDivision = PlayerStatusResponse.current_division,
		CurrentProgression = PlayerStatusResponse.current_progression
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the matchmaking division rules
	*
	* @param _MatchmakingId				The id of matchmaking queue
	*
	* @return 										The request
*/
{{{Http::P}}}K_Request {{{P}}}GetMatchmakingDivisionRules(Integer _MatchmakingId) {
	declare Text Route = {{{Http::P}}}InjectRouteParameters(
		{{{P}}}C_Route_GetMatchmakingDivisionRules,
		[{{{P}}}C_RouteParameter_MatchmakingId => ""^_MatchmakingId]
	);
	return {{{Http::P}}}CreateGet({{{Config::P}}}Get().APIMatchmakingUrl^{{{P}}}C_API_Matchmaking^Route, {{{P}}}GetHeadersWithClubAuth());
}

{{{MatchmakingStruct::P}}}K_Division[Text] {{{P}}}GetResponseFromGetMatchmakingDivisionRules({{{Http::P}}}K_Request _Request) {
	declare ComponentMatchmakingAPI_K_HttpDisplayDivisionRules DisplayDivisionRulesResponse;
	DisplayDivisionRulesResponse.fromjson({{{Http::P}}}GetResult(_Request));

	declare {{{MatchmakingStruct::P}}}K_Division[Text] Divisions;

	foreach (division in DisplayDivisionRulesResponse.divisions) {
		Divisions[division.id] = {{{MatchmakingStruct::P}}}K_Division {
			Id = division.id,
			Position = division.position,
			RuleType = division.display_rule_type,
			MinimumPoints = division.display_rule_minimum_points,
			MaximumPoints = division.display_rule_maximum_points,
			MinimumRank = division.display_rule_minimum_rank
		};
	}

	return Divisions;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the official queue id
	*
	*	@param _QueueName									The name of the queue
	*
	* @return 													The request
*/
{{{Http::P}}}K_Request {{{P}}}GetOfficialQueue(Text _QueueName) {
	declare Text Route = {{{Http::P}}}InjectRouteParameters(
		{{{P}}}C_Route_GetOfficialQueue,
		[{{{P}}}C_RouteParameter_QueueName => _QueueName]
	);
	return {{{Http::P}}}CreateGet({{{Config::P}}}Get().APIMatchmakingUrl^{{{P}}}C_API_Official^Route, {{{P}}}GetHeadersWithClubAuth());
}

Integer {{{P}}}GetResponseFromGetOfficialQueue({{{Http::P}}}K_Request _Request) {
	declare ComponentMatchmakingAPI_K_HttpOfficialQueue OfficialQueueResponse;
	OfficialQueueResponse.fromjson({{{Http::P}}}GetResult(_Request));

	return OfficialQueueResponse.id;
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the local player leaderboard
	*
	* @param _MatchmakingId				The id of matchmaking queue
	*
	* @return 										The request
*/
{{{Http::P}}}K_Request {{{P}}}GetMatchmakingLeaderboard(Integer _MatchmakingId) {
	declare Text Route = {{{Http::P}}}InjectRouteParameters(
		{{{P}}}C_Route_GetLeaderboard,
		[{{{P}}}C_RouteParameter_MatchmakingId => ""^_MatchmakingId]
	);

	return {{{Http::P}}}CreateGet({{{Config::P}}}Get().APIMatchmakingUrl^{{{P}}}C_API_Matchmaking^Route, {{{P}}}GetHeadersWithClubAuth());
}

{{{MatchmakingStruct::P}}}K_PlayerRank {{{P}}}GetResponseFromGetMatchmakingLeaderboard({{{Http::P}}}K_Request _Request) {
	declare ComponentMatchmakingAPI_K_HttpPlayerRanking LeaderboardResponse;
	LeaderboardResponse.fromjson({{{Http::P}}}GetResult(_Request));

	declare Leaderboard = {{{MatchmakingStruct::P}}}K_PlayerRank {
		MatchmakingId = LeaderboardResponse.matchmaking_id,
		AccountId = LeaderboardResponse.player,
		Score = LeaderboardResponse.score
	};

	return Leaderboard;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to post "accept match". NB no response body.
	*
	* @param _MatchmakingId				The id of matchmaking queue
	*
	* @return 													The request
*/
{{{Http::P}}}K_Request {{{P}}}PostMatchmakingAccept(Integer _MatchmakingId) {
	declare Text Route = {{{Http::P}}}InjectRouteParameters(
		{{{P}}}C_Route_PostMatchmakingAccept,
		[{{{P}}}C_RouteParameter_MatchmakingId => ""^_MatchmakingId]
	);
	return {{{Http::P}}}CreatePost({{{Config::P}}}Get().APIMatchmakingUrl^{{{P}}}C_API_Matchmaking^Route, "", {{{P}}}GetHeadersWithClubAuth());
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to post "cancel match". NB no response body.
	*
	* @param _MatchmakingId				The id of matchmaking queue
	*
	* @return 													The request
*/
{{{Http::P}}}K_Request {{{P}}}PostMatchmakingCancel(Integer _MatchmakingId) {
	declare Text Route = {{{Http::P}}}InjectRouteParameters(
		{{{P}}}C_Route_PostMatchmakingCancel,
		[{{{P}}}C_RouteParameter_MatchmakingId => ""^_MatchmakingId]
	);
	return {{{Http::P}}}CreatePost({{{Config::P}}}Get().APIMatchmakingUrl^{{{P}}}C_API_Matchmaking^Route, "", {{{P}}}GetHeadersWithClubAuth());
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get a match by match Lid
	*
	* @param _MatchId				The Lid of match
	*
	* @return 													The request
*/
{{{Http::P}}}K_Request {{{P}}}GetMatchByLid(Text _MatchLid) {
	declare Text Route = {{{Http::P}}}InjectRouteParameters(
		{{{P}}}C_Route_GetMatchByLid,
		[{{{P}}}C_RouteParameter_MatchLid => _MatchLid]
	);
	return {{{Http::P}}}CreateGet({{{Config::P}}}Get().APIBordeauxClubUrl^{{{P}}}C_API_Matches^Route, {{{P}}}GetHeadersWithClubAuth());
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Match by Lid response
	*
	* @param _Request				The request
	*
	* @return 							The match join link
*/
Text {{{P}}}GetResponseFromGetMatchByLid({{{Http::P}}}K_Request _Request) {
	declare ComponentMatchmakingAPI_K_HttpMatch MatchResponse;
	MatchResponse.fromjson({{{Http::P}}}GetResult(_Request));
	return MatchResponse.join_link;
}
""",
[
	Http::Component(),
	MatchmakingStruct::Component(),
	HttpStruct::Component(),
	Config::Component(),
	HttpClubAuthorizationHeader::Component()
],
[]
);
}
 